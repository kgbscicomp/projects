function Electrode_Plotter_Group_McGurk_v3(filenames,Auditory_Color,Auditory_El,alphaLevel,sphere_rad,DatDir)
% function Electrode_Plotter_Group_LatSounds(filenames,Visual_Color,Auditory_Color,Auditory_El,Visual_El)
%function Electrode_Plotter_v2(SubjID, stat_Filename, useMNI)
%  Takes data from ECoG_Plotter and displays on surface

% REQUIRED:
%  SubjID - string corresponding to subject's ID on Electrode Registration
%  stat_Filename - string of data file name containing stats we want to see
%  useMNI - 0 if using MNI transformed coord., 1 if using subj specific coord.

% V2 (EA): GUI Version Modifications 
%  - plot color statistics on electrodes
%  - Remove FS dependency to be compatible with Windows
%  - No need to load in Python 
%  - Quick movie viewing option (won't save images but for quick checks)

% *EA* - To do:
% - Grabbing electrode location for combined subject data (might just take
%   input SubjID as a cell if we want to combine)
% - Convert reused code to a function :(Combine rescale and changeAxis 
%    function into one)
% - Remove line 127 and 128 b/f running on other subj
% - Need to save vertex ID variable into RAS_to_Label
% - To plot stats on electrode, we need channel x stats variable saved,
%   order of the electrodes as it appears on eeglab (also need this to be
%   able to correctly project electrodes onto the inflated surface)
% - Need better colorbar scaling method for 2 conditions (change label not
% the size of greyed out area)
% - Prevent depth electrodes from being projected onto inflated surfaces
% save image not saving in correct colors

%% Variable for running section by section
%clear
% close all
% clc
%SubjID = '1187HF';
% SubjID = '1125UM';
% stat_Filename = 'Aud-AllChan_sig_MNI_lh.mgz';

useMNI=1;


%% Initialize directory paths and variables
orig_dir = pwd;

if useMNI==0
    FS_Subject = SubjID;
else
    FS_Subject = 'cvs_avg35_inMNI152';
end

if strfind(FS_Subject, 'UM') % *EA* currently var post serves no function
    post = input('Enter 0 for Pre-Op pial, 1 for Post-Op pial: ');
else
    post = 0;
end

% Load in Electrodes
% load([dropboxpath,'/Electrode_Registration/',SubjID,'/Electrodes/Electrode_Labels.mat'])

%% Electrode RAS
% if ExpNum==1
%     Visual_El = [-27.5107180000000,-53.5562580000000,-5.40545900000000;-26.9761880000000,-46.5439450000000,-3.75751000000000;-27.6857720000000,-51.1394030000000,-0.977583000000000;-33.6776060000000,-36.0588160000000,-23.7588160000000;-25.8305940000000,-69.0061710000000,12.1854010000000;-26.2487150000000,-70.6736870000000,18.2092520000000;-26.9137120000000,-72.1916640000000,24.0717830000000;-27.5645270000000,-73.6848430000000,29.9850880000000;-28.2782460000000,-75.0349020000000,35.7576700000000;-29.0611860000000,-76.4491250000000,41.6067620000000;-29.7545270000000,-77.8426990000000,47.1453040000000;-26.8326550000000,-44.8733470000000,37.1358020000000;-25.2781120000000,-60.6667700000000,41.5577160000000;-24.8343400000000,-65.7597260000000,42.7215570000000;-24.3125190000000,-70.9041170000000,43.9115730000000;-25.2701810000000,-36.8453470000000,-10.5054010000000;-29.0769400000000,-41.2332640000000,-6.99546500000000;-30.2629530000000,-22.4901090000000,-31.6920740000000;-40.6212350000000,-21.6412010000000,-33.0193820000000;-36.0461460000000,-26.7898910000000,-30.3598020000000;-19.5808660000000,-36.5999240000000,-17.5354610000000;-24.2185970000000,-42.4814150000000,-19.0780640000000;-33.5402790000000,-42.3354210000000,-23.1518710000000;-20.5874440000000,-47.2092950000000,-14.7779050000000;-29.2509170000000,-46.4814410000000,-20.2354390000000;-39.4436800000000,-47.3030190000000,-23.1521490000000;-25.1832600000000,-51.8925130000000,-16.8070760000000;-34.3232730000000,-52.6418000000000,-20.1249160000000;-44.3136560000000,-52.5359990000000,-22.9418140000000;-50.6905480000000,-75.0200920000000,-11.7633230000000;-50.7716030000000,-79.9116480000000,-5.82334300000000;-54.8873750000000,-70.5965120000000,-7.23222000000000;-54.2519650000000,-74.6746830000000,-1.07820300000000;-52.7667770000000,-78.9093550000000,6.24980600000000;-57.9005970000000,-70.3256260000000,4.15488300000000;-55.3793260000000,-74.0732800000000,11.1592400000000;-53.1711580000000,-77.7231600000000,17.0230850000000;-27.8620220000000,-42.9361410000000,-9.61626200000000;-26.6053100000000,-47.9363960000000,-7.30362300000000;-25.3378930000000,-52.9810970000000,-5.14920600000000;-24.0774410000000,-58.1127500000000,-2.95901000000000;-40.9956770000000,-26.1334220000000,-12.0872090000000;-41.0152700000000,-31.8397720000000,-10.1188030000000;-40.9155240000000,-37.2820080000000,-8.17106200000000;-40.7399990000000,-42.4411760000000,-6.10491900000000;-27.7611110000000,-37.2215000000000,-16.6920680000000;-28.2033850000000,-42.0848880000000,-14.2806210000000;-28.6193180000000,-46.7678330000000,-12.0644090000000;-29.0282540000000,-51.4855170000000,-10.1327220000000;-28.5382110000000,-25.7614160000000,-21.8152280000000;-29.2509390000000,-34.9085130000000,-17.2479530000000;-29.5267540000000,-39.4695140000000,-15.0314520000000;-29.8152920000000,-44.0916410000000,-12.7981070000000;-30.1133120000000,-48.9091220000000,-10.4445420000000;-24.3510580000000,-44.7286960000000,-11.2843650000000;-25.4303710000000,-49.4482240000000,-9.86108700000000;-26.4856800000000,-54.4450300000000,-8.30254700000000;-54.4847340000000,-74.7957420000000,2.20619800000000;-60.1644330000000,-66.4988250000000,-0.712536000000000;-2.04539100000000,-57.1786350000000,6.28799900000000;0.523744000000000,-66.7672460000000,4.17059400000000;2.07376700000000,-75.7640500000000,2.99064800000000;0.0305470000000000,-62.5151900000000,10.0129130000000;2.24199500000000,-72.2271120000000,10.0156080000000;2.94716400000000,-81.7814870000000,8.20043800000000;0.207200000000000,-57.9928890000000,16.9394000000000;1.41240900000000,-68.2166670000000,16.0211660000000;2.74553100000000,-77.9391900000000,15.1858790000000;1.02358200000000,-64.0452580000000,22.9120510000000;2.08221800000000,-74.4702030000000,21.6329980000000;2.99906000000000,-84.0390170000000,19.9641350000000;0.716411000000000,-60.1759990000000,29.8516530000000;0.741143000000000,-70.5222700000000,28.0050500000000;2.46154100000000,-80.3965530000000,27.0061960000000;0.545797000000000,-65.7420960000000,33.9421800000000;1.32213600000000,-76.7132260000000,32.4792640000000;0.757413000000000,-72.1763500000000,39.0932640000000;0.243283000000000,-81.5927050000000,36.5395150000000;-25.9258800000000,-88.4594500000000,39.7141270000000;-15.8197890000000,-91.4875560000000,38.5943640000000;-4.47298000000000,-92.8057790000000,34.2342830000000;-42.3414730000000,-82.7798000000000,35.0205190000000;-31.9568670000000,-88.5905530000000,36.0320170000000;-12.5347030000000,-95.0392380000000,32.6458100000000;-2.13509800000000,-94.8745120000000,26.7892500000000;-55.7239190000000,-71.0344580000000,28.1018100000000;-39.4813230000000,-87.0129930000000,29.9908130000000;-30.0673980000000,-91.7637180000000,28.9820420000000;-20.4166560000000,-95.8530270000000,28.1633160000000;-9.59258800000000,-98.7452770000000,25.9179680000000;-36.0057750000000,-91.2827610000000,23.0421810000000;-27.4653400000000,-96.0359880000000,22.2506170000000;-16.7201520000000,-100.485352000000,21.8324970000000;-6.09677500000000,-101.482254000000,19.0782420000000;-56.3284760000000,-71.3466870000000,16.2990330000000;-50.5108110000000,-81.0581890000000,16.0119970000000;-42.2831540000000,-88.7048720000000,16.1410750000000;-33.3475760000000,-94.7815480000000,16.1697680000000;-23.1972200000000,-100.582336000000,16.2773190000000;-12.9137400000000,-103.418198000000,15.0698840000000;-59.2599720000000,-67.7552110000000,10.1458640000000;-54.2926370000000,-76.4102100000000,9.97351100000000;-29.4940590000000,-99.1691890000000,9.89582100000000;-19.5952260000000,-104.098854000000,8.81840600000000;-7.13785600000000,-105.428955000000,7.70487000000000;-51.5791740000000,-80.6785050000000,4.29718800000000;-44.5121840000000,-89.2001800000000,4.93452700000000;-35.1194420000000,-96.6544420000000,4.09336000000000;-25.8611320000000,-102.364494000000,3.03280100000000;-13.7736960000000,-106.038902000000,2.12583200000000;-54.0755690000000,-74.4808620000000,-3.00141500000000;-40.4213410000000,-92.6308360000000,-1.84121300000000;-31.2838190000000,-99.8370290000000,-4.06576300000000;-19.0915550000000,-104.301765000000,-6.58597200000000;-5.66595500000000,-103.805908000000,-6.71429400000000;-50.0692900000000,-77.7975580000000,-10.2514110000000;-44.5970420000000,-87.7989650000000,-9.92318900000000;-24.3189200000000,-100.957603000000,-13.6315080000000;-10.7401630000000,-101.525803000000,-14.8940730000000;-24.2200720000000,-46.6583820000000,-17.5743370000000;-29.3370630000000,-55.8722230000000,-18.0024340000000;-35.7436600000000,-75.0224230000000,-19.6458780000000;-18.8228610000000,-44.5487000000000,-13.8035390000000;-22.8910850000000,-52.9325410000000,-15.4196850000000;-26.8607330000000,-62.7516440000000,-16.4088250000000;-29.5451790000000,-72.1405600000000,-18.1830220000000;-31.8389930000000,-82.2778700000000,-21.0734140000000;-17.2422580000000,-50.8610840000000,-11.5782680000000;-20.5496500000000,-59.6817820000000,-13.8819770000000;-23.2828040000000,-69.5544660000000,-15.4939230000000;-25.7652050000000,-78.6879390000000,-19.4518620000000;-11.1255750000000,-49.1772080000000,-6.22941000000000;-14.6910110000000,-58.3513680000000,-10.8465180000000;-17.2357460000000,-66.4699520000000,-13.2424470000000;-20.3014050000000,-75.6895870000000,-17.0354580000000;-22.7061410000000,-84.5583570000000,-20.8188100000000;-9.11356600000000,-56.7517470000000,-4.92863800000000;-11.5462830000000,-64.8763540000000,-10.2894130000000;-13.5691290000000,-73.3278660000000,-13.9708140000000;-16.5414270000000,-82.1647570000000,-18.9438480000000;-5.20754900000000,-54.8723450000000,1.65189400000000;-6.82598700000000,-62.3290180000000,-5.04569800000000;-8.32149700000000,-69.8573840000000,-10.9157310000000;-10.1822360000000,-78.8850670000000,-16.0853840000000;-13.4219830000000,-88.5947420000000,-20.8339230000000;-2.80777800000000,-60.8612750000000,1.01102600000000;-3.47042100000000,-68.6841660000000,-6.13689000000000;-4.70583100000000,-76.8235400000000,-12.4692940000000;-6.41132200000000,-85.2867360000000,-18.1931040000000;-24.4510430000000,-32.9120300000000,-17.8040600000000;-26.7980280000000,-43.1273880000000,-11.2683620000000;-27.9292140000000,-48.4231600000000,-7.96120200000000;-46.6869430000000,-62.3607410000000,-20.8839610000000;-38.7365720000000,-60.4204600000000,1.20349900000000;-42.7059180000000,-69.6641380000000,7.90307100000000;-44.8319530000000,-74.0702850000000,9.74260800000000;-31.8931240000000,-64.1269390000000,-1.74564200000000;-35.2040070000000,-67.1073430000000,1.78951500000000;-38.3420010000000,-70.0131830000000,5.30337100000000;-41.2849090000000,-72.9026920000000,8.19452500000000;-17.7950060000000,-66.6630660000000,-1.40706600000000;-22.0959330000000,-68.1680090000000,0.636789000000000;-26.4950320000000,-69.7032930000000,2.96723300000000;-34.2746610000000,-60.2379400000000,1.12328800000000;-37.1430390000000,-64.2375460000000,3.78638700000000;-39.6887580000000,-67.7828820000000,6.33667500000000;-42.7139660000000,-71.9626890000000,8.19927200000000;-35.0608750000000,-42.8606130000000,-23.3618810000000;-36.0077440000000,-34.0999810000000,-27.4107630000000;-37.6799390000000,-25.4126120000000,-30.9087180000000;-37.6491580000000,-17.6039780000000,-38.0490230000000;-38.8537670000000,-48.8458250000000,-22.4631460000000;-40.6051830000000,-39.4576720000000,-25.9249110000000;-44.8411980000000,-45.9481350000000,-25.3485220000000;-36.0008250000000,-28.4014050000000,-5.75597700000000;-40.9544210000000,-26.6455310000000,-7.55530800000000;-45.6710280000000,-40.1133060000000,-11.1513340000000;-66.8403470000000,-53.4208030000000,-0.241631000000000;-62.5367660000000,-50.4457930000000,-17.7087670000000;-69.2210690000000,-42.5830690000000,-3.91331700000000];
%     Auditory_El = [-48.5520720000000,-15.7665230000000,-5.96008900000000;-36.7581060000000,-36.9537100000000,0.954005000000000;-40.7350630000000,-33.7890260000000,1.18215800000000;-44.7165800000000,-30.5661450000000,1.80528100000000;-48.6371550000000,-27.2951080000000,2.54385500000000;-56.6203570000000,-20.6927200000000,4.79447800000000;-51.4593390000000,-3.01533900000000,-17.8924650000000;-56.1594960000000,-4.76645100000000,-15.5595860000000;-67.4717300000000,-7.57862100000000,-8.25087200000000;-75.1915350000000,-8.22477800000000,-1.13270800000000;-68.8836710000000,-8.43358000000000,-7.42362300000000;-75.4948820000000,-9.83147100000000,0.380986000000000;-43.3335860000000,-15.9622110000000,-6.09010500000000;-57.2952660000000,-19.3788250000000,-1.37121600000000;-39.8301590000000,2.16233100000000,-15.3515880000000;-61.1023720000000,-3.09873200000000,-0.251333000000000;-41.8608650000000,-12.0899110000000,-2.98256200000000;-46.7331780000000,-9.87252400000000,-3.02261800000000;-51.5621560000000,-7.71053400000000,-3.10120400000000;-57.0088390000000,-5.92769300000000,-2.55079900000000;-31.5179210000000,-17.2578000000000,-0.238939000000000;-36.5182750000000,-15.5072830000000,0.224713000000000;-46.1936480000000,-11.4481130000000,0.797552000000000;-51.0118990000000,-9.23245300000000,0.637455000000000;-60.0929340000000,-5.04503100000000,-0.0927710000000000;-64.4507860000000,-3.32304700000000,1.26840300000000;-53.6516050000000,-14.3636960000000,-6.02177900000000;-39.5083880000000,-23.3005940000000,-6.26354900000000;-59.4461070000000,-20.7584410000000,1.24500000000000;-63.7859480000000,-19.8753680000000,4.10006500000000;-67.3397190000000,-18.8453480000000,7.23645100000000;-42.5099770000000,-33.6193780000000,-3.62478000000000;-55.7507910000000,-26.0285810000000,0.108826000000000;-64.7652210000000,-20.9782820000000,5.48347500000000;-68.7918440000000,-18.9317810000000,8.91603100000000;-71.5588780000000,-17.5774630000000,12.8699390000000;-69.6142350000000,-35.9946580000000,4.02351500000000;-69.1457980000000,-39.6435760000000,10.9905790000000;-69.5140530000000,-29.0235520000000,8.89364100000000;-65.3484270000000,-53.7468910000000,17.9982630000000;-68.1389390000000,-43.8421360000000,16.8424940000000;-68.9373170000000,-32.8974870000000,16.4109470000000;-66.8966600000000,-47.3553450000000,23.0722260000000;-67.7300490000000,-37.1241210000000,21.2355130000000;-66.9427110000000,-41.4271580000000,28.0733050000000;-62.2954410000000,4.11613700000000,4.18939100000000;-61.7090680000000,4.13732000000000,-4.92924300000000;-63.9111020000000,-2.79249300000000,3.82925400000000;-64.3774150000000,-3.30528000000000,-4.74108700000000;-67.0613170000000,-10.5375830000000,4.87137400000000;-68.3839110000000,-16.5539610000000,13.1678500000000;-67.2166520000000,-11.0598530000000,-3.68631400000000;-68.9360200000000,-16.6700480000000,4.84404900000000;-69.6973420000000,-23.6639880000000,4.96264200000000;-69.4770430000000,-23.2172670000000,-3.12014600000000];
%     if size(Visual_El,1)==180
%         bad_el = [ 175:176];
%         Visual_El(bad_el,:) = [];
%     end
% 
% elseif ExpNum==2
%     Visual_El = [-43.8207890000000,-39.2785800000000,-26.7223210000000;-55.5709720000000,-44.2199760000000,-26.5096470000000;-44.7051280000000,-81.8957900000000,-17.1538700000000;-58.2212330000000,-66.0082050000000,-11.2494790000000;-41.8296320000000,-87.6807480000000,-16.1827850000000;-25.6795320000000,-36.3748560000000,-13.0598470000000;-26.2312900000000,-47.1475890000000,-7.65792000000000;-26.8163550000000,-57.7475750000000,-2.90943500000000;-27.0778970000000,-63.1747460000000,-0.611745000000000;-27.3529720000000,-68.6545290000000,1.68016800000000;-27.6932250000000,-73.9467250000000,4.06808700000000;-26.8991160000000,-33.5989970000000,-14.9096420000000;-27.5379940000000,-38.6261010000000,-12.3762340000000;-28.1197680000000,-43.6179350000000,-9.88875100000000;-28.7805960000000,-48.6958440000000,-7.30991700000000;-66.8232190000000,-47.8535820000000,-9.59070200000000;-36.4378660000000,-95.7886810000000,-5.58270600000000;-42.5507850000000,-90.7632520000000,-3.56457500000000;-52.3425710000000,-78.7243460000000,0.166929000000000;-57.0031970000000,-71.3264240000000,2.38782700000000;-58.1154660000000,-41.8188600000000,-30.1334610000000;-53.4864980000000,-65.3295630000000,-19.7255230000000;-27.5107180000000,-53.5562580000000,-5.40545900000000;-24.6262360000000,-41.9731560000000,-9.24533400000000;-26.9761880000000,-46.5439450000000,-3.75751000000000;-27.6857720000000,-51.1394030000000,-0.977583000000000;-33.6776060000000,-36.0588160000000,-23.7588160000000;-25.8305940000000,-69.0061710000000,12.1854010000000;-26.2487150000000,-70.6736870000000,18.2092520000000;-26.9137120000000,-72.1916640000000,24.0717830000000;-27.5645270000000,-73.6848430000000,29.9850880000000;-28.2782460000000,-75.0349020000000,35.7576700000000;-29.0611860000000,-76.4491250000000,41.6067620000000;-29.7545270000000,-77.8426990000000,47.1453040000000;-26.8326550000000,-44.8733470000000,37.1358020000000;-25.2781120000000,-60.6667700000000,41.5577160000000;-24.8343400000000,-65.7597260000000,42.7215570000000;-24.3125190000000,-70.9041170000000,43.9115730000000;-2.04539100000000,-57.1786350000000,6.28799900000000;0.523744000000000,-66.7672460000000,4.17059400000000;2.07376700000000,-75.7640500000000,2.99064800000000;0.0305470000000000,-62.5151900000000,10.0129130000000;2.24199500000000,-72.2271120000000,10.0156080000000;2.94716400000000,-81.7814870000000,8.20043800000000;0.207200000000000,-57.9928890000000,16.9394000000000;1.41240900000000,-68.2166670000000,16.0211660000000;2.74553100000000,-77.9391900000000,15.1858790000000;1.02358200000000,-64.0452580000000,22.9120510000000;2.08221800000000,-74.4702030000000,21.6329980000000;2.99906000000000,-84.0390170000000,19.9641350000000;0.716411000000000,-60.1759990000000,29.8516530000000;0.741143000000000,-70.5222700000000,28.0050500000000;2.46154100000000,-80.3965530000000,27.0061960000000;0.545797000000000,-65.7420960000000,33.9421800000000;1.32213600000000,-76.7132260000000,32.4792640000000;0.757413000000000,-72.1763500000000,39.0932640000000;0.243283000000000,-81.5927050000000,36.5395150000000;-25.9258800000000,-88.4594500000000,39.7141270000000;-15.8197890000000,-91.4875560000000,38.5943640000000;-4.47298000000000,-92.8057790000000,34.2342830000000;-42.3414730000000,-82.7798000000000,35.0205190000000;-31.9568670000000,-88.5905530000000,36.0320170000000;-12.5347030000000,-95.0392380000000,32.6458100000000;-2.13509800000000,-94.8745120000000,26.7892500000000;-55.7239190000000,-71.0344580000000,28.1018100000000;-39.4813230000000,-87.0129930000000,29.9908130000000;-30.0673980000000,-91.7637180000000,28.9820420000000;-20.4166560000000,-95.8530270000000,28.1633160000000;-9.59258800000000,-98.7452770000000,25.9179680000000;-36.0057750000000,-91.2827610000000,23.0421810000000;-27.4653400000000,-96.0359880000000,22.2506170000000;-16.7201520000000,-100.485352000000,21.8324970000000;-6.09677500000000,-101.482254000000,19.0782420000000;-56.3284760000000,-71.3466870000000,16.2990330000000;-50.5108110000000,-81.0581890000000,16.0119970000000;-42.2831540000000,-88.7048720000000,16.1410750000000;-33.3475760000000,-94.7815480000000,16.1697680000000;-23.1972200000000,-100.582336000000,16.2773190000000;-12.9137400000000,-103.418198000000,15.0698840000000;-59.2599720000000,-67.7552110000000,10.1458640000000;-54.2926370000000,-76.4102100000000,9.97351100000000;-29.4940590000000,-99.1691890000000,9.89582100000000;-19.5952260000000,-104.098854000000,8.81840600000000;-7.13785600000000,-105.428955000000,7.70487000000000;-51.5791740000000,-80.6785050000000,4.29718800000000;-44.5121840000000,-89.2001800000000,4.93452700000000;-35.1194420000000,-96.6544420000000,4.09336000000000;-25.8611320000000,-102.364494000000,3.03280100000000;-13.7736960000000,-106.038902000000,2.12583200000000;-54.0755690000000,-74.4808620000000,-3.00141500000000;-40.4213410000000,-92.6308360000000,-1.84121300000000;-31.2838190000000,-99.8370290000000,-4.06576300000000;-19.0915550000000,-104.301765000000,-6.58597200000000;-5.66595500000000,-103.805908000000,-6.71429400000000;-50.0692900000000,-77.7975580000000,-10.2514110000000;-44.5970420000000,-87.7989650000000,-9.92318900000000;-24.3189200000000,-100.957603000000,-13.6315080000000;-10.7401630000000,-101.525803000000,-14.8940730000000;-24.2200720000000,-46.6583820000000,-17.5743370000000;-29.3370630000000,-55.8722230000000,-18.0024340000000;-35.7436600000000,-75.0224230000000,-19.6458780000000;-18.8228610000000,-44.5487000000000,-13.8035390000000;-22.8910850000000,-52.9325410000000,-15.4196850000000;-26.8607330000000,-62.7516440000000,-16.4088250000000;-29.5451790000000,-72.1405600000000,-18.1830220000000;-31.8389930000000,-82.2778700000000,-21.0734140000000;-17.2422580000000,-50.8610840000000,-11.5782680000000;-20.5496500000000,-59.6817820000000,-13.8819770000000;-23.2828040000000,-69.5544660000000,-15.4939230000000;-25.7652050000000,-78.6879390000000,-19.4518620000000;-11.1255750000000,-49.1772080000000,-6.22941000000000;-14.6910110000000,-58.3513680000000,-10.8465180000000;-17.2357460000000,-66.4699520000000,-13.2424470000000;-20.3014050000000,-75.6895870000000,-17.0354580000000;-22.7061410000000,-84.5583570000000,-20.8188100000000;-9.11356600000000,-56.7517470000000,-4.92863800000000;-11.5462830000000,-64.8763540000000,-10.2894130000000;-13.5691290000000,-73.3278660000000,-13.9708140000000;-16.5414270000000,-82.1647570000000,-18.9438480000000;-5.20754900000000,-54.8723450000000,1.65189400000000;-6.82598700000000,-62.3290180000000,-5.04569800000000;-8.32149700000000,-69.8573840000000,-10.9157310000000;-10.1822360000000,-78.8850670000000,-16.0853840000000;-13.4219830000000,-88.5947420000000,-20.8339230000000;-2.80777800000000,-60.8612750000000,1.01102600000000;-3.47042100000000,-68.6841660000000,-6.13689000000000;-4.70583100000000,-76.8235400000000,-12.4692940000000;-6.41132200000000,-85.2867360000000,-18.1931040000000;-24.4510430000000,-32.9120300000000,-17.8040600000000;-26.7980280000000,-43.1273880000000,-11.2683620000000;-27.9292140000000,-48.4231600000000,-7.96120200000000;-46.6869430000000,-62.3607410000000,-20.8839610000000;-38.7365720000000,-60.4204600000000,1.20349900000000;-42.7059180000000,-69.6641380000000,7.90307100000000;-44.8319530000000,-74.0702850000000,9.74260800000000;-31.8931240000000,-64.1269390000000,-1.74564200000000;-35.2040070000000,-67.1073430000000,1.78951500000000;-38.3420010000000,-70.0131830000000,5.30337100000000;-41.2849090000000,-72.9026920000000,8.19452500000000;-17.7950060000000,-66.6630660000000,-1.40706600000000;-22.0959330000000,-68.1680090000000,0.636789000000000;-26.4950320000000,-69.7032930000000,2.96723300000000;-34.2746610000000,-60.2379400000000,1.12328800000000;-37.1430390000000,-64.2375460000000,3.78638700000000;-39.6887580000000,-67.7828820000000,6.33667500000000;-42.7139660000000,-71.9626890000000,8.19927200000000;-35.0608750000000,-42.8606130000000,-23.3618810000000;-36.0077440000000,-34.0999810000000,-27.4107630000000;-37.6799390000000,-25.4126120000000,-30.9087180000000;-37.6491580000000,-17.6039780000000,-38.0490230000000;-38.8537670000000,-48.8458250000000,-22.4631460000000;-40.6051830000000,-39.4576720000000,-25.9249110000000;-44.8411980000000,-45.9481350000000,-25.3485220000000];
%     Auditory_El = [-63.6129680000000,-1.44351900000000,7.69106800000000;-66.2261810000000,-7.67086000000000,7.60826000000000;-68.5577320000000,-15.0358780000000,5.99641300000000;-69.5517270000000,-21.8999230000000,3.91407000000000;-68.5389100000000,-18.2684540000000,12.4231450000000;-69.5574490000000,-38.9709720000000,2.04667900000000;-68.2487030000000,-30.5578750000000,23.1783990000000;-65.0670090000000,-6.48099000000000,1.05023800000000;-68.0749210000000,-13.1979720000000,6.17818600000000;-69.1264340000000,-32.9711800000000,14.8491860000000;-64.7043420000000,-4.05705800000000,-5.61159900000000;-69.3954240000000,-20.0651470000000,2.89787300000000;-69.6322250000000,-30.0488810000000,6.93122000000000;-68.9841920000000,-40.5170080000000,11.8051820000000;-67.3980260000000,-10.1778960000000,-7.66498800000000;-69.9591520000000,-27.0823080000000,0.100443000000000;-69.5635530000000,-37.9827480000000,4.02832600000000;-64.7484910000000,-3.24732800000000,5.02824400000000;-58.1965400000000,12.2393530000000,-0.411697000000000;-62.1978310000000,2.73510800000000,-0.539945000000000;-69.9530610000000,-21.7090170000000,-4.33609600000000;-68.6852050000000,-15.7649060000000,5.45380700000000;-70.4427440000000,-30.3115990000000,2.27625700000000;-68.9757750000000,-19.9916010000000,7.77875400000000;-70.5862070000000,-38.2332750000000,4.13356500000000;-68.8574930000000,-26.4683010000000,10.1811310000000;-67.7913910000000,-18.5919100000000,13.8441890000000;-69.0009560000000,-34.3899770000000,12.0384380000000;-39.8301590000000,2.16233100000000,-15.3515880000000;-61.1023720000000,-3.09873200000000,-0.251333000000000;-41.8608650000000,-12.0899110000000,-2.98256200000000;-46.7331780000000,-9.87252400000000,-3.02261800000000;-51.5621560000000,-7.71053400000000,-3.10120400000000;-57.0088390000000,-5.92769300000000,-2.55079900000000;-31.5179210000000,-17.2578000000000,-0.238939000000000;-36.5182750000000,-15.5072830000000,0.224713000000000;-46.1936480000000,-11.4481130000000,0.797552000000000;-51.0118990000000,-9.23245300000000,0.637455000000000;-60.0929340000000,-5.04503100000000,-0.0927710000000000;-64.4507860000000,-3.32304700000000,1.26840300000000;-62.2954410000000,4.11613700000000,4.18939100000000;-61.7090680000000,4.13732000000000,-4.92924300000000;-63.9111020000000,-2.79249300000000,3.82925400000000;-64.3774150000000,-3.30528000000000,-4.74108700000000;-67.0613170000000,-10.5375830000000,4.87137400000000;-68.3839110000000,-16.5539610000000,13.1678500000000;-67.2166520000000,-11.0598530000000,-3.68631400000000;-68.9360200000000,-16.6700480000000,4.84404900000000;-69.6973420000000,-23.6639880000000,4.96264200000000;-69.4770430000000,-23.2172670000000,-3.12014600000000;-68.4794160000000,-15.0997150000000,8.52435900000000;-65.0537260000000,-6.44839400000000,0.133780000000000;-69.5140610000000,-21.9083610000000,5.87831100000000;-35.2473330000000,-34.9433910000000,1.58282800000000;-40.8556060000000,-34.7884950000000,2.05121300000000;-46.4746040000000,-34.6363540000000,2.55533600000000;-52.0501180000000,-34.5015130000000,3.00269100000000;-57.5153130000000,-34.3480280000000,3.56794400000000;-63.1111280000000,-34.2749830000000,4.19553900000000;-38.5954890000000,-39.9838480000000,22.1244950000000;-48.9539240000000,-11.8443150000000,-0.922444000000000;-53.8165010000000,-9.12351200000000,-0.409827000000000;-58.7982770000000,-6.54368200000000,0.0257660000000000;-64.0322800000000,-4.09236800000000,0.522745000000000;-68.9265980000000,-1.63509100000000,1.21918000000000;-73.6879140000000,0.872607000000000,1.91807900000000;-43.2914650000000,-32.9553900000000,0.919152000000000;-48.7664710000000,-31.9341090000000,1.91562600000000;-54.2503730000000,-31.0772030000000,2.89021500000000;-59.8456300000000,-30.2430990000000,3.85848400000000;-65.1984660000000,-29.3808770000000,4.86474400000000;-70.7728330000000,-28.4544010000000,5.99037900000000;-76.4110500000000,-27.5947020000000,7.15241800000000];
% end
%     


%% Read in T1

% save('test')

SubjPath = [DatDir,filesep ...
    FS_Subject filesep];

% cRAS = [mri.c_r mri.c_a mri.c_s];
cRAS =[-1 -17 19];

cd (orig_dir)

% %% Load in overlay 
% try
%     disp('***************** Reading mgz file *****************')
%     disp('                       ...                          ')
%     [vol, ~, ~, ~] = load_mgh(stat_Filename);
%     % *EA* - FIX Windows may not be able to process the above command 
% catch
%     [stat_Filename, pathname, ~] = uigetfile({'*.mgz';...
%         '*.*'},'Select overlay file.',...
%         orig_dir);
%     [vol, ~, ~, ~] = load_mgh([pathname stat_Filename]);
% end
% disp('****************************************************')
% 
% global sol2 % current
% global sol_log
% global sol_lin
% 
% sol2 = squeeze(vol); % vertices x time;
% cond = sign(sol2); % if plotting against 2 conditions
% 
% % just for 1125UM
% sol2(sol2==Inf) = -999; 
% sol2(sol2 ==-999) = max(max(sol2));
% 
% tic
% % generate log and non-log values
% if linear 
%     if ~ampl
%         sol_lin = abs(sol2);
%         sol_lin = (1 - sol_lin) .* cond;
%     else
%         sol_lin = sol2;
%     end
%     sol_log = -log(abs(sol2));
%     sol_log(sol_lin == 0) = 0;
%     sol_log = sol_log .* cond;
% else % log scaling
%     sol_log = sol2;
%     sol_lin= exp(-abs(sol2));
%     if ~ampl
%         sol_lin = (1 - sol_lin) .* cond;
%     else
%         sol_lin = sol_lin .* cond;
%     end
% end
% toc

%% Load pial info 

% Get which hemi from the input file
hemi = 'lh';

if strcmp(hemi, 'rh') || strcmp(hemi, 'lh')
    baseName = [SubjPath, filesep, hemi];
    pial_file = [baseName '.white'];
    if exist(pial_file, 'file') == 2
        pial_files_found = pial_file;
    else
        error(['Could not find ' hemi '.pial in ' SubjPath]);
    end
end

[vertices, faces] = freesurfer_read_surf(pial_files_found);

[vol_curv] = load_mgh([SubjPath hemi '.curv.mgh']);
% vol_curv2 = rescale(vol_curv,.5,1);
% vol_curv2 = [vol_curv2 vol_curv2 vol_curv2];



% vol_curv = rescale(vol_curv,.5,1);

% vol_curv = (vol_curv - min(vol_curv)) / ( max(vol_curv) - min(vol_curv) );
% new_min = .5;
% vol_curv = (vol_curv + new_min) / ( max(vol_curv) + new_min );
% vol_curv = ((1-vol_curv)/(1/scaler))+scaler;
% vol_curv = (vol_curv*2)-.75;


%% Set-up GUI display:

% scale
% 
vol_curv2 = rescale(vol_curv,0,1);
vol_curv2 = (vol_curv2*-1)+1;
vol_curv2 = rescale(vol_curv2,.4,.85,'InputMin',.2,'InputMax',.4);
% hist(vol_curv2)

vol_curv2 = [vol_curv2 vol_curv2 vol_curv2];

%%
% 1.) pial
close all
disp('**************** Setting up display ****************')
disp('                       ...                          ')
h=patch('vertices',vertices,'faces',faces(:,[1 3 2]), ...
'facecolor','interp','edgecolor','none','FaceVertexCData',vol_curv2,...
'Tag','surf');
hold on
axis off
h.FaceLighting = 'gouraud';
h.AmbientStrength = .25;
h.DiffuseStrength = 1;
h.SpecularStrength = .1;
axis equal
axis tight
h.Clipping = 'off';    % turn clipping off


%     material('dull');
    axis('image');
    axis off
    view([-90 0]);
    camlight(40,40)
    camlight(-40,40)
    camlight(0,-40)
    
%     h.AmbientStrength = .10;
    h.DiffuseStrength = 1;
    h.SpecularStrength = .1;
    
    brightness = .55;
    temp = findobj(gca, 'type', 'light');
    for j = 1:length(temp)
        temp(j).Color = repmat(brightness, 1,3);
    end
    

rotate3d

r = sphere_rad;
[x,y,z] = sphere(10);


h.FaceAlpha = alphaLevel;


% try to create a plane that divides the surface to help w opacity
% % % % % plane_limit = find(vertices(:,1)<-25); % Lateral
% % % % % plane_limit = find(vertices(:,1)>-25); % Medial
% % % % % plane_vertex = vertices;plane_vertex(plane_limit,:) = [];
% % % % % plane_face = faces;
% % % % % rm_face = zeros(1,size(plane_face,1));
% % % % % for i=1:size(plane_face,1)
% % % % %     for j=1:3
% % % % %         if ismember(plane_face(i,j),plane_limit)
% % % % %             rm_face(i) = 1;
% % % % %         end
% % % % %     end
% % % % % end
% % % % % rm_face = find(rm_face==1);
% % % % % plane_face(rm_face,:) = [];
% % % % % 
% % % % % % fix face indices
% % % % % face_index_orig = 1:size(vertices,1);
% % % % % face_index_orig(plane_limit) = [];
% % % % % face_index_new = 1:length(face_index_orig);
% % % % % 
% % % % % plane_face_updated = plane_face;
% % % % % for i=1:length(face_index_new)
% % % % %    temp = find(plane_face==face_index_orig(i));
% % % % %     plane_face_updated(temp) = face_index_new(i);
% % % % % end
% % % % % save('split_pial_lateral.mat','plane_vertex','plane_face_updated') % Lateral
% % % % % save('split_pial_medial.mat','plane_vertex','plane_face_updated') % Medial

%%
% h2=patch('vertices',plane_vertex,'faces',plane_face_updated(:,[1 3 2]), ...
% 'facecolor',[1 1 1],'edgecolor','none');
% h2.FaceLighting = 'gouraud';
% h2.AmbientStrength = .25;
% h2.DiffuseStrength = 1;
% h2.SpecularStrength = .1;
% h2.Clipping = 'off';    % turn clipping off
%     



%

for j = 1:size(Auditory_El,1)
    a = Auditory_El(j,1) -  cRAS(1);
    b = Auditory_El(j,2) -  cRAS(2);
    c = Auditory_El(j,3) -  cRAS(3);
    
    s1 = surf(x*r+a, y*r+b, z*r+c);
    
    %set(s1,'edgecolor','none','facecolor',color,'Tag','elec');
    set(s1,'edgecolor','none','facecolor',Auditory_Color(j,:),'Tag','elec');
    s1.Clipping = 'off';
    s1.FaceLighting = 'gouraud';
    s1.AmbientStrength = .1;
    s1.DiffuseStrength = 1;
    s1.SpecularStrength = 0;
    s1.FaceAlpha = Auditory_El(j,4)*0.7;


%     material('dull');

end


% for j = 1:size(Auditory_El,1)
%     a = Auditory_El(j,1) -  cRAS(1);
%     b = Auditory_El(j,2) -  cRAS(2);
%     c = Auditory_El(j,3) -  cRAS(3);
%     
%     s1 = surf(x*r+a, y*r+b, z*r+c);
%     
%     %set(s1,'edgecolor','none','facecolor',color,'Tag','elec');
%     set(s1,'edgecolor','none','facecolor',Auditory_Color(j,:),'Tag','elec');
%     s1.Clipping = 'off';
%     s1.FaceLighting = 'gouraud';
%         s1.AmbientStrength = .1;
%     s1.DiffuseStrength = 1;
%     s1.SpecularStrength = 0;
% 
% %     material('dull');
% end
%
% h.AmbientStrength = .45;

%% save pngs

 [~] = mkdir('images');

view_angles = [-90 0];
for i=1
    view(view_angles(i,:));
    
    temp = findobj(gca, 'type', 'light');
    input_angles = [40,40;-40,40;0,-40;40,-10];
    for j = 1:length(temp)
        camlight(temp(j),input_angles(j,1),input_angles(j,2))
    end
    
    print('-dpng','-r300',['images/',filenames,plog_cond,num2str(i),'.png'])

end


end

%% Callback Functions
function changeScale(source,~,timepoint,ampl)
global pthresh
global pthresh_val
global pthresh_max
global pthresh_max_val
global sol2
global CMap_orig

% Convert data values to match scale
if source.Value == 2 % Linear scale
    global sol_lin
    sol2 = sol_lin;
    if ~ampl
        pthresh_val = 1 - pthresh;
        pthresh_max_val = 1 - pthresh_max;
    else
        pthresh_val = pthresh;
        pthresh_max_val = pthresh_max;
    end
else % Log scale
    global sol_log
    sol2 = sol_log;
    pthresh_val = -log(pthresh);
    pthresh_max_val = -log(pthresh_max);
end

if min(min(sol2))<0 % Check if neg values
    
    map = CMap_orig;
    insert = ceil(size(map,1)/2);
    %insert = 251;
    range = round((pthresh_val/pthresh_max_val)*(insert-1));
    zpos = insert - range : insert + range;
    map(zpos,:) = repmat([.7 .7 .7],length(zpos),1);
    colormap(map);
    colorbar
    
    caxis([-pthresh_max_val pthresh_max_val])
    cb = colorbar;
    set(cb, 'YTick', [-pthresh_max_val -pthresh_val pthresh_val pthresh_max_val])
    set(cb, 'YTickLabel', [-pthresh_max -pthresh pthresh pthresh_max])
else
    colormap (CMap_orig)
    cb = colorbar;
    caxis([pthresh_val pthresh_max_val])
    set(cb, 'YTick', [pthresh_val pthresh_max_val])
    set(cb, 'YTickLabel', [pthresh pthresh_max])
end

if source.Value == 2
    ylabel(cb, 'P-Values (Lin. scale)')
else
    ylabel(cb, 'P-Values (Log scale)')
end

setTime(str2double(timepoint.String),[],timepoint)

end

function changeAxis(source,~,scaling,ampl)
global pthresh
global pthresh_val
global pthresh_max
global pthresh_max_val
global CMap_orig
global sol2

try  
    pthresh_max = str2double(source.String);
    if scaling.Value == 2 % linear
        pthresh_max_val = pthresh_max;
        if ~ampl
            pthresh_max_val = 1 - pthresh_max_val;
        end        
    else % log
        pthresh_max_val = -log(pthresh_max);
    end
    
    if min(min(sol2))<0 % Check if neg values       
        map = CMap_orig;
        insert = ceil(size(map,1)/2);
        %insert = 251;
        range = round((pthresh_val/pthresh_max_val)*(insert-1));
        zpos = insert - range : insert + range;
        map(zpos,:) = repmat([.7 .7 .7],length(zpos),1);
        colormap(map);
        colorbar
        
        caxis([-pthresh_max_val pthresh_max_val])
        cb = colorbar;
        set(cb, 'YTick', [-pthresh_max_val -pthresh_val pthresh_val pthresh_max_val])
        set(cb, 'YTickLabel', [-pthresh_max -pthresh pthresh pthresh_max])
        ylabel(cb, 'P-Values (FDR-Corrected)')
    else
        colormap (CMap_orig)
        cb = colorbar;
        caxis([pthresh_val pthresh_max_val])
        set(cb, 'YTick', [pthresh_val pthresh_max_val])
        set(cb, 'YTickLabel', [pthresh pthresh_max])
        ylabel(cb, 'Working')
    end
catch
    % warning message
    disp('Invalid value');
end

end

function rescale2(source,~,timepoint,scaling)
global pthresh_val
global pthresh
global pthresh_max
global pthresh_max_val
global CMap_orig
global sol2

pthresh = str2double(source.String);
if scaling.Value == 2 % linear
    pthresh_val = pthresh;
else
    pthresh_val = -log(pthresh);
end

if min(min(sol2))<0 % Check if neg values
    map = CMap_orig;
    insert = ceil(size(map,1)/2);
    range = round((pthresh_val/pthresh_max_val)*(insert-1));
    zpos = insert - range : insert + range;
    map(zpos,:) = repmat([.7 .7 .7],length(zpos),1);
    colormap(map);
    colorbar
    
    caxis([-pthresh_max_val pthresh_max_val])
    cb = colorbar;
    cb_labels = get(cb, 'YTick');
    set(cb, 'YTick', [-pthresh_max_val -pthresh_val pthresh_val pthresh_max_val])
    set(cb, 'YTickLabel', [-pthresh_max -pthresh pthresh pthresh_max])
else
    colormap (CMap_orig)
    cb = colorbar;
    caxis([pthresh_val pthresh_max_val])
    set(cb, 'YTick', [pthresh_val pthresh_max_val])
    set(cb, 'YTickLabel', [pthresh pthresh_max])
    ylabel(cb, 'P-Values (FDR-Corrected)')
end

    setTime(str2double(timepoint.String),[],timepoint)
end

function loadOverlay(~,~)
global pthresh
global sol2 
disp(pthresh)

[stat_Filename, pathname, ~] = uigetfile({'*.mgz';...
    '*.*'},'Select overlay file.',...
    pwd);

[vol, ~, ~, ~] = load_mgh([pathname stat_Filename]);

sol2 = squeeze(vol); % vertices x time;

end

function save_options(source,~,save_opt)
if source.Value % if saving images turned on
    pos = get(source,'Position');
    pos(2) = pos(2) + 0.3;
    set(source,'Position',pos);
    
    set(save_opt,'Visible','on');
else % saving img turned off
    set(save_opt,'Visible','off');
    set(source,'Position',[0.4 0.4 0.3 0.3]);
end
end
function surfzlim(source,~)

temp = findobj(gca, 'type', 'patch','Tag','surf');
temp.FaceAlpha = source.Value;

end

function toggle_elec(source,~,inflated_chk)
if get(source,'Value') % show elec
    if get(inflated_chk,'Value') % if in inflated view
        set(findobj('tag','elecinfl'),'Visible','on');
    else % if in white matter or pial view
        set(findobj('tag','elec','type','surf'),'Visible','on');
    end
else % hide elec
    if get(inflated_chk,'Value') % if in inflated view
        set(findobj('tag','elecinfl'),'Visible','off');
    else
        set(findobj('tag','elec','type','surf'),'Visible','off');
    end
end
end

function loadPreset(~,~)
global CMap_orig
global pthresh
global pthresh_val
global pthresh_max
global pthresh_max_val 
global sol2

list = {'parula','jet','hsv','hot','cool','spring','summer','autumn',...
    'winter','gray','bone','copper','pink'};
[indx,~] = listdlg('ListString',list);

newmap = eval((list{indx}));

if min(min(sol2))<0
    CMap_orig = imresize(newmap,[501,3]);
    newCMap = CMap_orig;
    insert = ceil(size(newCMap,1)/2);
    range = round((pthresh_val/pthresh_max_val)*(insert-1));
    zpos = insert - range : insert + range;
    newCMap(zpos,:) = repmat([.7 .7 .7],length(zpos),1);
    colormap(newCMap);
else
    CMap_orig = newmap;
    colormap(newmap);
end
    


end

function selColor(source,~,col,otherCol)
%% Not working yet - imresize making color array goes past [0 1]
global CMap_orig
global pthresh
global pthresh_val
global pthresh_max
global pthresh_max_val

curr_RGB = get(col,'BackgroundColor');
c = uisetcolor(curr_RGB,'Select a color');
set(col,'BackgroundColor',c);

dark = c;
r_val = linspace(dark(1),0.9,32);
g_val = linspace(dark(2),0.9,32);
b_val = linspace(dark(3),0.9,32);
map1 = [r_val' g_val' b_val'];
%map1 = map1'; map1 = fliplr(map1)';
darkest = get(otherCol,'BackgroundColor');
r_val = linspace(darkest(1),0.9,32);
g_val = linspace(darkest(2),0.9,32);
b_val = linspace(darkest(3),0.9,32);
map2 = [fliplr(r_val)' fliplr(g_val)' fliplr(b_val)'];
%map2 = map2'; map2 = fliplr(map2)';
newmap = [map1; map2];

CMap_orig = abs(imresize(newmap,[501,3]));
newCMap = CMap_orig;
insert = ceil(size(newCMap,1)/2);
range = round((pthresh_val/pthresh_max_val)*(insert-1));
zpos = insert - range : insert + range;
newCMap(zpos,:) = repmat([.7 .7 .7],length(zpos),1);
colormap(newCMap);
%%
end

function showSurf(source,~,ext,surf1,surf2,SubjPath,hemi,timepoint,elec_on)
global pthresh_val
global sol2

%% Update Gui Options
set(surf1,'Value',0);
set(surf2,'Value',0);
set(source,'Value',1);

% remove overlay
h_data = findobj(gca, 'type', 'patch','Tag','surf_data');
delete(h_data);

[vertices, faces] = freesurfer_read_surf([SubjPath filesep hemi ext]);

h = findobj(gca, 'type', 'patch','Tag','surf');
set(h, 'vertices',vertices, 'faces',faces(:,[1 3 2]));

%%
if get(elec_on,'Value')
colorarray=[190/255 32/255 38/255;39/255 126/255 183/255;59/255 181/255 74/255; 251/255 191/255 21/255; 0.3010 0.7450 0.9330;1 0 1; 1 .5 0; 0 1 .5;0 .5 1;1 0 .5;.5 1 0;.5 0 1;.5 .5 .5; 0 0 0]; % red, green, blue, cyan, yellow, magenta, orange, blue-green, light blue,fuscia,lime-green,purple, grey,black

if strcmp(ext,'.pial') || strcmp(ext,'.white')
    set(findobj('tag','elec','type','surf'),'Visible','on')
    set(findobj('tag','elecinfl','type','surf'),'Visible','off')
else % for inflated pial surface
    set(findobj('tag','elec','type','surf'),'Visible','off');
    set(findobj('tag','elecinfl','type','surf'),'Visible','on')
    if isempty(findobj('tag','elecinfl','type','surf'))
        load('elecVert1125.mat');
        delete(findobj('tag','elecinfl'));
        
        for i = 1:size(elecVertID,1)
            r = 2;
            [x,y,z] = sphere(10);
            
            a = vertices(elecVertID(i),1);%+cRAS(1);
            b = vertices(elecVertID(i),2);%+cRAS(2);
            c = vertices(elecVertID(i),3);%+cRAS(3);
            %     numElec = size(Electrode_Labels.LH_MNI.Real.(genvarname([char(Electrode_Labels.Groups(i))])),1);
            %     for j = 1:numElec
            %         % *EA* - turn LH_MNI.Real into a variable so it'll work with RH and
            %         % bipolar as well
            %         a = Electrode_Labels.LH_MNI.Real.(genvarname([char(Electrode_Labels.Groups(i))]))(j,5) - ...
            %             cRAS(1);
            %         b = Electrode_Labels.LH_MNI.Real.(genvarname([char(Electrode_Labels.Groups(i))]))(j,6) - ...
            %             cRAS(2);
            %         c = Electrode_Labels.LH_MNI.Real.(genvarname([char(Electrode_Labels.Groups(i))]))(j,7) - ...
            %             cRAS(3);
            
            s1 = surf(x*r+a, y*r+b, z*r+c);
            axis equal
            
            color = colorarray(i,:);
              
            set(s1,'edgecolor','none','facecolor',color,'Tag','elecinfl');
            %set(s1,'edgecolor','none','facecolor',[1 0 0],'Tag','elecinfl');
        end
    end
end
end

%% Plot overlay
currenttime = str2double(get(timepoint,'String'));
empty_vals = find(abs(sol2(:,currenttime))<pthresh_val);
empty_mtx = ones(size(sol2,1),1);
empty_mtx(empty_vals) = zeros(size(empty_vals,1),1);

% if all vals empty, make 1 not
if length(empty_vals)==length(empty_mtx)
    empty_mtx(1) = 1;
end

plot_data_vals = sol2(:,currenttime);

% update nonsig vals
plot_data_vals(empty_vals) = pthresh_val;


patch('faces',faces(:,[1 3 2]),'vertices',vertices,...
    'FaceVertexCData',plot_data_vals,'facecolor','interp',...
    'edgecolor','none','FaceVertexAlphaData',empty_mtx,...
    'FaceAlpha','interp','Tag','surf_data');

end

function showTime(source,~,timesld,h_axis)
% show numeric time value 
if ~isempty(findobj('type','Line','tag','marker'))
    delete(findobj('type','Line','tag','marker'))
end

time = str2double(get(source,'String'));

if isnumeric(time) & length(time)==1 & ...
    time >= get(timesld,'Min') & ...
    time <= get(timesld,'Max')
    set(timesld,'Value',time);
    plot([time time], [0 1],'LineWidth',3,'Color',[1 0 0],'Parent',h_axis,'Tag','marker');
    setTime(timesld,[],source,h_axis);
else
    %invalid time point message
    err = uicontrol(gcf,'Style','text','String',...
    'Invalid Time', 'FontSize', 12, 'ForegroundColor',[1 0 0] , ...
    'Units','normalized','Position',[0.63 0.132 0.1 0.043],...
    'Tag','text','Visible','on');
    pause(0.3)
    delete(err)
end

end  

function stop(source,~) %probably can convert to anonym. func.
    set(source,'Value',1);
end

function play(source, ~, sol2,pthresh_val,screenshot,timesld,StopMovie,timepoint,save_chkbox,h_axis,increment)
set(save_chkbox,'Visible','off');
set(source,'Enable','off');
set(screenshot,'Enable','off');
set(StopMovie,'Enable','on');
set(StopMovie,'Visible','on');
pause(0.08);

save =  get(save_chkbox,'Value'); % 1 if saving img.
%Remove current time marker
if ~isempty(findobj('type','Line','tag','marker'))
    delete(findobj('type','Line','tag','marker'))
end

h_data = findobj(gca, 'type', 'patch','Tag','surf_data');

start = round(get(timesld, 'Value'));
%lastVal = size(sol2,2);
lastVal = [];
increment = str2double(get(increment,'String'));
for i= start:increment:size(sol2,2)
    lastVal = i;
    if get(StopMovie,'Value')
        if exist('f','var')
            delete(f)
        end
        plot([lastVal-increment lastVal-increment], [0 1],'LineWidth',3,'Color',[1 0 0],'Parent',h_axis,'Tag','marker');
        break;
    end
    currenttime = i;
    empty_vals = find(abs(sol2(:,currenttime))<pthresh_val);
    empty_mtx = ones(size(sol2,1),1);
    empty_mtx(empty_vals) = zeros(size(empty_vals,1),1);
    
    % if all vals empty, make 1 not
    if length(empty_vals)==length(empty_mtx)
        empty_mtx(1) = 1;
    end
    
    plot_data_vals = sol2(:,currenttime);
    
    % update nonsig vals
    plot_data_vals(empty_vals) = pthresh_val;
    
    if exist('f','var')
        delete(f)
    end
    
    set(h_data, 'FaceVertexCData',plot_data_vals, 'FaceVertexAlphaData',empty_mtx);
    % update time marker
    hold on
    f = plot([i i], [0 1],'LineWidth',3,'Color',[1 0 0],'Parent',h_axis,'Tag','marker');
    
    % if ~QuickView
    %     camlight(40,40)
    %     camlight(-40,40)
    %     camlight(0,-40)
    %
    %     brightness = .55;
    %     temp = findobj(gca, 'type', 'light');
    %     for j = 1:length(temp)
    %         temp(j).Color = repmat(brightness, 1,3);
    %     end
    %
    %     try
    %         rmdir('3D','s');
    %     end
    %     mkdir('3D');
    % end
    %
    drawnow
    if save
        saveas(gcf,['3D/',num2str(i),'.png']);
    end
end

set(timesld,'Value', lastVal);
set(timepoint,'String',num2str(lastVal));
set(save_chkbox,'Visible','on')
set(source,'Enable','on');
set(screenshot,'Enable','on');
set(StopMovie,'Visible','off');
set(StopMovie,'Value',0);
end

function capture(source,~,timesld,saved)
    set(source,'Enable','off');
    set(saved,'Visible','on');
    pause(0.08);
    set(source,'Enable','on');
    set(saved,'Visible','off');

    all_ax = findall(gcf,'type','axes');
    cb = findobj(gcf,'type','colorbar');
    %ax_old = gca;
    f_new = figure;
    %set(f_new, 'Visible', 'off'); 
    copyobj([cb, all_ax(2)],f_new,'legacy');
    copyobj(all_ax(1),f_new);
    img_name = ['Time_' num2str(round(get(timesld, 'Value')))];
    print(f_new,img_name,'-djpeg','-r400')

end

function setTime(source,~,timepoint,h_axis)
global sol2
global pthresh_val

% Remove current time marker
if ~isempty(findobj('type','Line','tag','marker'))
    delete(findobj('type','Line','tag','marker'))
end

h_data = findobj(gca, 'type', 'patch','Tag','surf_data');

if isnumeric(source)
    currenttime = source;
else
    currenttime = round(source.Value);
end

set(timepoint,'String',num2str(currenttime));
if nargin == 4
    plot([currenttime currenttime], [0 1],'LineWidth',3,'Color',[1 0 0],'Parent',h_axis,'Tag','marker');
end
empty_vals = find(abs(sol2(:,currenttime))<pthresh_val);
empty_mtx = ones(size(sol2,1),1);
empty_mtx(empty_vals) = zeros(size(empty_vals,1),1);

% if all vals empty, make 1 not
if length(empty_vals)==length(empty_mtx)
    empty_mtx(1) = 1;
end

plot_data_vals = sol2(:,currenttime);

% update nonsig vals
plot_data_vals(empty_vals) = pthresh_val;

set(h_data, 'FaceVertexCData',plot_data_vals, 'FaceVertexAlphaData',empty_mtx);

drawnow
end